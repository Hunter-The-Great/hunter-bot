// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Gif {
  id      String   @id @default(cuid())
  uid     String
  alias   String
  link    String   @db.VarChar(500)
  user    User     @relation(fields: [uid], references: [id])
  savedAt DateTime @default(now())

  @@unique([uid, alias])
}

model Waifu {
  id      String   @id @default(cuid())
  uid     String
  image   String
  rarity  Int
  user    User     @relation(fields: [uid], references: [id])
  savedAt DateTime @default(now())

  @@unique([uid, image])
}

model User {
  id               String          @id
  username         String
  //? display name
  canvasToken      Bytes?
  waifuCount       Int             @default(0)
  guessingPoints   Int             @default(0)
  guessingAttempts Int             @default(0)
  bot              Boolean         @default(false)
  savedAt          DateTime        @default(now())
  messages         Message[]
  waifus           Waifu[]
  gifs             Gif[]
  gitHubWebhooks   GitHubWebhook[]
}

model GitHubWebhook {
  id            String   @id @default(cuid())
  uid           String
  discriminator String
  channelID     String
  user          User     @relation(fields: [uid], references: [id])
  savedAt       DateTime @default(now())

  @@unique([uid, discriminator])
}

model Message {
  id        String   @id
  guildID   String
  channel   String
  author    String
  timestamp DateTime
  content   String   @db.VarChar(4000)
  guild     Guild    @relation(fields: [guildID], references: [id])
  user      User     @relation(fields: [author], references: [id])
  savedAt   DateTime @default(now())
}

model Guild {
  id             String          @id
  jarvis         Boolean         @default(false)
  logging        Boolean         @default(false)
  savedAt        DateTime        @default(now())
  activeChannels activeChannel[]
  messages       Message[]
}

model activeChannel {
  id      String @id
  guildID String
  guild   Guild  @relation(fields: [guildID], references: [id])
}

model feedback {
  id      String   @id @default(cuid())
  message String   @db.VarChar(500)
  savedAt DateTime @default(now())
}
